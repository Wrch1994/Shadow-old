apply plugin: 'com.android.library'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION

    defaultConfig {
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'lib.pro'

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/mock-android/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/mock-android/release/')
        }
    }

}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.25'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    compileOnly 'com.tencent.hydevteam.pluginframework:pluginloader:'+PLUGINMANAGER_VERSION
    compileOnly 'com.tencent.hydevteam.pluginframework:plugincontainer:'+PLUGINMANAGER_VERSION
    compileOnly 'com.tencent.hydevteam.pluginframework:installed-plugin:'+PLUGINMANAGER_VERSION
}

apply plugin: 'maven-publish'

def getDependencyNode(scope, groupId, artifactId, version) {
    Node node = new Node(null, 'dependency')
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    node.appendNode('version', version)
    node.appendNode('scope', scope)
    return node
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.tencent.libexample'
            artifactId "example-lib"
            version project.ARTIFACT_VERSION
            if ("${System.env.PUBLISH_RELEASE}".equalsIgnoreCase("true")) {
                artifact("build/outputs/aar/lib-release.aar")
            } else {
                artifact("build/outputs/aar/lib-debug.aar")
            }

            pom.withXml {
                def root = asNode()
                def slf4j = getDependencyNode('compile', 'org.slf4j', 'slf4j-api', '1.7.25')
                def dependencies = root.appendNode('dependencies')
                dependencies.append(slf4j)
                def scm = root.appendNode('scm')
                scm.appendNode('connection', 'http://git.code.oa.com/cubershi/android-lib-example.git')
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "rdm"
                password "rdm"
            }
            if ("${System.env.PUBLISH_RELEASE}".equalsIgnoreCase("true")) {
                url "http://maven.oa.com/nexus/content/repositories/thirdparty/"
            } else {
                url "http://maven.oa.com/nexus/content/repositories/thirdparty-snapshots"
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}

def createCopyMockAndroidTask(buildType) {
    def outputFile = file("${getBuildDir()}/generated/assets/mock-android/${buildType}/mock-android.apk")
    outputFile.getParentFile().mkdirs()
    def inputFile = file("${project(':mock-android').getBuildDir()}/outputs/apk/${buildType}/mock-android-${buildType}.apk")
    return tasks.create("copy${buildType.capitalize()}DemoPluginTask", Copy) {
        group = 'build'
        description = '复制mock-android到assets中.'
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn(":mock-android:assemble${buildType.capitalize()}")
}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        task.dependsOn createCopyMockAndroidTask('debug')
    }
    if (task.name == "generateReleaseAssets") {
        task.dependsOn createCopyMockAndroidTask('release')
    }
}